datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
    provider = "prisma-client-js"
}

model Theme {
    id       Int       @id @default(autoincrement())
    name     String
    llmModel LLMModel?
}

model Sticker {
    id              Int              @id @default(autoincrement())
    name            String?
    description     String?
    imageUrl        String
    // userId      Int
    // user        User    @relation(fields: [userId], references: [id])
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    labels          Label[]
    prompt          Prompt?          @relation(fields: [promptId], references: [id])
    promptId        Int?
    cloudinaryImage CloudinaryImage?

    @@index([promptId])
}

model CloudinaryImage {
    id        Int      @id @default(autoincrement())
    publicId  String?
    sticker   Sticker  @relation(fields: [stickerId], references: [id], onDelete: Cascade)
    stickerId Int      @unique
    // userId      Int
    // user        User    @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([stickerId])
    @@index([createdAt(sort: Desc)])
}

model LLMModel {
    id          Int      @id @default(autoincrement())
    name        String?
    description String?
    theme       Theme?   @relation(fields: [themeId], references: [id])
    themeId     Int?     @unique
    // userId      Int
    // user        User    @relation(fields: [userId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    prompts     Prompt[]
}

model Prompt {
    id          Int        @id @default(autoincrement())
    vanityId    String?    @unique
    name        String?
    description String?
    model       LLMModel[]

    // userId      Int
    // user        User    @relation(fields: [userId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    stickers  Sticker[]
}

model Label {
    id          Int       @id @default(autoincrement())
    name        String?
    description String?
    // userId      Int
    // user        User    @relation(fields: [userId], references: [id])
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    stickers    Sticker[]
}
